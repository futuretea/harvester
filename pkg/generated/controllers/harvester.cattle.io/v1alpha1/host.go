/*
Copyright 2021 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/rancher/harvester/pkg/apis/harvester.cattle.io/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type HostHandler func(string, *v1alpha1.Host) (*v1alpha1.Host, error)

type HostController interface {
	generic.ControllerMeta
	HostClient

	OnChange(ctx context.Context, name string, sync HostHandler)
	OnRemove(ctx context.Context, name string, sync HostHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() HostCache
}

type HostClient interface {
	Create(*v1alpha1.Host) (*v1alpha1.Host, error)
	Update(*v1alpha1.Host) (*v1alpha1.Host, error)
	UpdateStatus(*v1alpha1.Host) (*v1alpha1.Host, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1alpha1.Host, error)
	List(opts metav1.ListOptions) (*v1alpha1.HostList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Host, err error)
}

type HostCache interface {
	Get(name string) (*v1alpha1.Host, error)
	List(selector labels.Selector) ([]*v1alpha1.Host, error)

	AddIndexer(indexName string, indexer HostIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.Host, error)
}

type HostIndexer func(obj *v1alpha1.Host) ([]string, error)

type hostController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewHostController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) HostController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &hostController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromHostHandlerToHandler(sync HostHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.Host
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.Host))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *hostController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.Host))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateHostDeepCopyOnChange(client HostClient, obj *v1alpha1.Host, handler func(obj *v1alpha1.Host) (*v1alpha1.Host, error)) (*v1alpha1.Host, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *hostController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *hostController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *hostController) OnChange(ctx context.Context, name string, sync HostHandler) {
	c.AddGenericHandler(ctx, name, FromHostHandlerToHandler(sync))
}

func (c *hostController) OnRemove(ctx context.Context, name string, sync HostHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromHostHandlerToHandler(sync)))
}

func (c *hostController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *hostController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *hostController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *hostController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *hostController) Cache() HostCache {
	return &hostCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *hostController) Create(obj *v1alpha1.Host) (*v1alpha1.Host, error) {
	result := &v1alpha1.Host{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *hostController) Update(obj *v1alpha1.Host) (*v1alpha1.Host, error) {
	result := &v1alpha1.Host{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *hostController) UpdateStatus(obj *v1alpha1.Host) (*v1alpha1.Host, error) {
	result := &v1alpha1.Host{}
	return result, c.client.UpdateStatus(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *hostController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *hostController) Get(name string, options metav1.GetOptions) (*v1alpha1.Host, error) {
	result := &v1alpha1.Host{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *hostController) List(opts metav1.ListOptions) (*v1alpha1.HostList, error) {
	result := &v1alpha1.HostList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *hostController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *hostController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.Host, error) {
	result := &v1alpha1.Host{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type hostCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *hostCache) Get(name string) (*v1alpha1.Host, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.Host), nil
}

func (c *hostCache) List(selector labels.Selector) (ret []*v1alpha1.Host, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Host))
	})

	return ret, err
}

func (c *hostCache) AddIndexer(indexName string, indexer HostIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.Host))
		},
	}))
}

func (c *hostCache) GetByIndex(indexName, key string) (result []*v1alpha1.Host, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.Host, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.Host))
	}
	return result, nil
}

type HostStatusHandler func(obj *v1alpha1.Host, status v1alpha1.HostStatus) (v1alpha1.HostStatus, error)

type HostGeneratingHandler func(obj *v1alpha1.Host, status v1alpha1.HostStatus) ([]runtime.Object, v1alpha1.HostStatus, error)

func RegisterHostStatusHandler(ctx context.Context, controller HostController, condition condition.Cond, name string, handler HostStatusHandler) {
	statusHandler := &hostStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromHostHandlerToHandler(statusHandler.sync))
}

func RegisterHostGeneratingHandler(ctx context.Context, controller HostController, apply apply.Apply,
	condition condition.Cond, name string, handler HostGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &hostGeneratingHandler{
		HostGeneratingHandler: handler,
		apply:                 apply,
		name:                  name,
		gvk:                   controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterHostStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type hostStatusHandler struct {
	client    HostClient
	condition condition.Cond
	handler   HostStatusHandler
}

func (a *hostStatusHandler) sync(key string, obj *v1alpha1.Host) (*v1alpha1.Host, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type hostGeneratingHandler struct {
	HostGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *hostGeneratingHandler) Remove(key string, obj *v1alpha1.Host) (*v1alpha1.Host, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.Host{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *hostGeneratingHandler) Handle(obj *v1alpha1.Host, status v1alpha1.HostStatus) (v1alpha1.HostStatus, error) {
	objs, newStatus, err := a.HostGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
